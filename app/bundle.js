const stories = document.querySelector('.stories');
const median = stories.offsetLeft + stories.clientWidth / 2;
const state = {
  current_story: stories.firstElementChild.lastElementChild
};

const navigateStories = direction => {
  const story = state.current_story;
  const lastItemInUserStory = story.parentNode.firstElementChild;
  const firstItemInUserStory = story.parentNode.lastElementChild;
  const hasNextUserStory = story.parentElement.nextElementSibling;
  const hasPrevUserStory = story.parentElement.previousElementSibling;

  if (direction === 'next') {
    if (lastItemInUserStory === story && !hasNextUserStory) return;else if (lastItemInUserStory === story && hasNextUserStory) {
      state.current_story = story.parentElement.nextElementSibling.lastElementChild;
      story.parentElement.nextElementSibling.scrollIntoView({
        behavior: 'smooth'
      });
    } else {
      story.classList.add('seen');
      state.current_story = story.previousElementSibling;
    }
  } else if (direction === 'prev') {
    if (firstItemInUserStory === story && !hasPrevUserStory) return;else if (firstItemInUserStory === story && hasPrevUserStory) {
      state.current_story = story.parentElement.previousElementSibling.firstElementChild;
      story.parentElement.previousElementSibling.scrollIntoView({
        behavior: 'smooth'
      });
    } else {
      story.nextElementSibling.classList.remove('seen');
      state.current_story = story.nextElementSibling;
    }
  }
};

stories.addEventListener('click', e => {
  if (e.target.nodeName !== 'ARTICLE') return;
  navigateStories(e.clientX > median ? 'next' : 'prev');
}); // left & right are free with snap points 👍

document.addEventListener('keydown', ({
  key
}) => {
  if (key !== 'ArrowDown' || key !== 'ArrowUp') navigateStories(key === 'ArrowDown' ? 'next' : 'prev');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJqcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdG9yaWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0b3JpZXMnKVxyXG5jb25zdCBtZWRpYW4gPSBzdG9yaWVzLm9mZnNldExlZnQgKyAoc3Rvcmllcy5jbGllbnRXaWR0aCAvIDIpXHJcblxyXG5jb25zdCBzdGF0ZSA9IHtcclxuICBjdXJyZW50X3N0b3J5OiBzdG9yaWVzLmZpcnN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGRcclxufVxyXG5cclxuY29uc3QgbmF2aWdhdGVTdG9yaWVzID0gZGlyZWN0aW9uID0+IHtcclxuICBjb25zdCBzdG9yeSA9IHN0YXRlLmN1cnJlbnRfc3RvcnlcclxuICBjb25zdCBsYXN0SXRlbUluVXNlclN0b3J5ID0gc3RvcnkucGFyZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZFxyXG4gIGNvbnN0IGZpcnN0SXRlbUluVXNlclN0b3J5ID0gc3RvcnkucGFyZW50Tm9kZS5sYXN0RWxlbWVudENoaWxkXHJcbiAgY29uc3QgaGFzTmV4dFVzZXJTdG9yeSA9IHN0b3J5LnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgY29uc3QgaGFzUHJldlVzZXJTdG9yeSA9IHN0b3J5LnBhcmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gIFxyXG4gIGlmIChkaXJlY3Rpb24gPT09ICduZXh0Jykge1xyXG4gICAgaWYgKGxhc3RJdGVtSW5Vc2VyU3RvcnkgPT09IHN0b3J5ICYmICFoYXNOZXh0VXNlclN0b3J5KVxyXG4gICAgICByZXR1cm5cclxuICAgIGVsc2UgaWYgKGxhc3RJdGVtSW5Vc2VyU3RvcnkgPT09IHN0b3J5ICYmIGhhc05leHRVc2VyU3RvcnkpIHtcclxuICAgICAgc3RhdGUuY3VycmVudF9zdG9yeSA9IHN0b3J5LnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLmxhc3RFbGVtZW50Q2hpbGRcclxuICAgICAgc3RvcnkucGFyZW50RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcuc2Nyb2xsSW50b1ZpZXcoe1xyXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHN0b3J5LmNsYXNzTGlzdC5hZGQoJ3NlZW4nKVxyXG4gICAgICBzdGF0ZS5jdXJyZW50X3N0b3J5ID0gc3RvcnkucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIGlmKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XHJcbiAgICBpZiAoZmlyc3RJdGVtSW5Vc2VyU3RvcnkgPT09IHN0b3J5ICYmICFoYXNQcmV2VXNlclN0b3J5KVxyXG4gICAgICByZXR1cm5cclxuICAgIGVsc2UgaWYgKGZpcnN0SXRlbUluVXNlclN0b3J5ID09PSBzdG9yeSAmJiBoYXNQcmV2VXNlclN0b3J5KSB7XHJcbiAgICAgIHN0YXRlLmN1cnJlbnRfc3RvcnkgPSBzdG9yeS5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgICAgc3RvcnkucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnNjcm9sbEludG9WaWV3KHtcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzdG9yeS5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnc2VlbicpXHJcbiAgICAgIHN0YXRlLmN1cnJlbnRfc3RvcnkgPSBzdG9yeS5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnN0b3JpZXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICBpZiAoZS50YXJnZXQubm9kZU5hbWUgIT09ICdBUlRJQ0xFJykgXHJcbiAgICByZXR1cm5cclxuICBcclxuICBuYXZpZ2F0ZVN0b3JpZXMoXHJcbiAgICBlLmNsaWVudFggPiBtZWRpYW4gXHJcbiAgICAgID8gJ25leHQnIFxyXG4gICAgICA6ICdwcmV2JylcclxufSlcclxuXHJcbi8vIGxlZnQgJiByaWdodCBhcmUgZnJlZSB3aXRoIHNuYXAgcG9pbnRzIPCfkY1cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICh7a2V5fSkgPT4ge1xyXG4gIGlmIChrZXkgIT09ICdBcnJvd0Rvd24nIHx8IGtleSAhPT0gJ0Fycm93VXAnKVxyXG4gICAgbmF2aWdhdGVTdG9yaWVzKFxyXG4gICAgICBrZXkgPT09ICdBcnJvd0Rvd24nXHJcbiAgICAgICAgPyAnbmV4dCdcclxuICAgICAgICA6ICdwcmV2JylcclxufSkiXSwibmFtZXMiOlsic3RvcmllcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm1lZGlhbiIsIm9mZnNldExlZnQiLCJjbGllbnRXaWR0aCIsInN0YXRlIiwiY3VycmVudF9zdG9yeSIsImZpcnN0RWxlbWVudENoaWxkIiwibGFzdEVsZW1lbnRDaGlsZCIsIm5hdmlnYXRlU3RvcmllcyIsImRpcmVjdGlvbiIsInN0b3J5IiwibGFzdEl0ZW1JblVzZXJTdG9yeSIsInBhcmVudE5vZGUiLCJmaXJzdEl0ZW1JblVzZXJTdG9yeSIsImhhc05leHRVc2VyU3RvcnkiLCJwYXJlbnRFbGVtZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiaGFzUHJldlVzZXJTdG9yeSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJub2RlTmFtZSIsImNsaWVudFgiLCJrZXkiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFVBQXZCLENBQWhC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
